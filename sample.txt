
Findings:

  public/js/bootstrap.js 
     javascript.jquery.security.audit.jquery-insecure-selector.jquery-insecure-selector
        User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities
        Details: https://sg.run/W8NL

         72â”† if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
          â‹®â”†----------------------------------------
         96â”† $(el).on('click', dismiss, this.close)
          â‹®â”†----------------------------------------
        190â”† this.$element  = $(element)
          â‹®â”†----------------------------------------
        284â”† var $btn = $(e.target).closest('.btn')
          â‹®â”†----------------------------------------
        286â”† if (!($(e.target).is('input[type="radio"], input[type="checkbox"]'))) {
          â‹®â”†----------------------------------------
        295â”† $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))
          â‹®â”†----------------------------------------
        316â”† this.$element    = $(element)
          â‹®â”†----------------------------------------
        439â”† var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])
          â‹®â”†----------------------------------------
        510â”† var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) // strip for ie7
          â‹®â”†----------------------------------------
        555â”† this.$element      = $(element)
          â‹®â”†----------------------------------------
        557â”† this.$trigger      = $('[data-toggle="collapse"][href="#' + element.id + '"],' +
          â‹®â”†----------------------------------------
        680â”† var $element = $(element)
          â‹®â”†----------------------------------------
        700â”† return $(target)
          â‹®â”†----------------------------------------
        769â”† $(element).on('click.bs.dropdown', this.toggle)
          â‹®â”†----------------------------------------
        782â”† var $parent = selector && $(selector)
          â‹®â”†----------------------------------------
        935â”† this.$element            = $(element)
          â‹®â”†----------------------------------------
        988â”† if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true
          â‹®â”†----------------------------------------
       1241â”† var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) // strip for ie7
          â‹®â”†----------------------------------------
       1308â”† this.$element  = $(element)
          â‹®â”†----------------------------------------
       1310â”†  ... $.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport)) ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          â‹®â”†----------------------------------------
       1310â”†  ... this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport)) ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          â‹®â”†----------------------------------------
       1310â”†  ... this.$element) : (this.options.viewport.selector || this.options.viewport)) ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          â‹®â”†----------------------------------------
       1368â”† obj : $(obj.currentTarget).data('bs.' + this.type)
          â‹®â”†----------------------------------------
       1372â”† $(obj.currentTarget).data('bs.' + this.type, self)
          â‹®â”†----------------------------------------
       1405â”† obj : $(obj.currentTarget).data('bs.' + this.type)
          â‹®â”†----------------------------------------
       1409â”† $(obj.currentTarget).data('bs.' + this.type, self)
          â‹®â”†----------------------------------------
       1571â”† var $tip = $(this.$tip)
          â‹®â”†----------------------------------------
       1715â”† self = $(e.currentTarget).data('bs.' + this.type)
          â‹®â”†----------------------------------------
       1718â”† $(e.currentTarget).data('bs.' + this.type, self)
          â‹®â”†----------------------------------------
       1904â”† this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)
          â‹®â”†----------------------------------------
       1904â”† this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)
          â‹®â”†----------------------------------------
       1999â”† var active = $(selector)
          â‹®â”†----------------------------------------
       2077â”† this.element = $(element)
          â‹®â”†----------------------------------------
       2234â”† this.$target = $(this.options.target)
          â‹®â”†----------------------------------------
       2238â”† this.$element     = $(element)
          â‹®â”†----------------------------------------
     javascript.jquery.security.audit.prohibit-jquery-html.prohibit-jquery-html
        JQuery's `.html()` is susceptible to Cross Site Scripting (XSS) attacks.  If you're just
        passing text, consider `.text()` instead. Otherwise, use a  function that escapes HTML such
        as edX's `HtmlUtils.setHtml()`.
        Details: https://sg.run/0Q9B

       1834â”† if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()


  public/js/jquery-3.2.1-min.js 
     javascript.browser.security.raw-html-concat.raw-html-concat
        User controlled data in a HTML string may result in XSS
        Details: https://sg.run/4xAx

          2â”†  ... "<a id='"+u+"'></a><select id='"+u+"-\r\\' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push(" ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          â‹®â”†----------------------------------------
          2â”†  ... "<a id='"+u+"'></a><select id='"+u+"-\r\\' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push(" ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          â‹®â”†----------------------------------------
          2â”†  ... "<a id='"+u+"'></a><select id='"+u+"-\r\\' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push(" ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          â‹®â”†----------------------------------------
     javascript.jquery.security.audit.jquery-insecure-selector.jquery-insecure-selector
        User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities
        Details: https://sg.run/W8NL

          3â”†  ... c)}catch(e){}X.set(a,b,c)}else c=void 0;return c}r.extend({hasData:function(a){return X.hasData(a)||W.hasData(a)},data:function(a,b,c){return X.access(a,b,c)},r ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          â‹®â”†----------------------------------------
     javascript.jquery.security.audit.prohibit-jquery-html.prohibit-jquery-html
        JQuery's `.html()` is susceptible to Cross Site Scripting (XSS) attacks.  If you're just
        passing text, consider `.text()` instead. Otherwise, use a  function that escapes HTML such
        as edX's `HtmlUtils.setHtml()`.
        Details: https://sg.run/0Q9B

          3â”†  ... f.html())),Ja(f,b,c,d)});if(m&&(e=qa(b,a[0].ownerDocument,!1,a,d),f=e.firstChild,1===e.childNodes.length&&(e=f),f||d)){for(h=r.map(na(e,"script"),Fa),i=h.length ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          â‹®â”†----------------------------------------
          4â”†  ... g.html(d?r("<div>").append(r.parseHTML(a)).find(d):a)}).always(c&&function(a,b){g.each(function(){c.apply(this,f||[a.responseText,b,a])})}),this},r.each(["ajaxS ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]


  setup/setup.go 
     go.gorilla.security.audit.handler-assignment-from-multiple-sources.handler-assignment-from-multiple-
     sources
        Variable err is assigned from two different sources: 'createUsersTable()' and
        'createProfileTable()'. Make sure this is intended, as this could cause logic bugs if they
        are treated as they are the same object.
        Details: https://sg.run/gL3y

         71â”† err = createUsersTable() //create users table
         72â”† if err != nil {
         73â”† 	res = append(res, JsonResp{
         74â”† 		Status:  "0",
         75â”† 		Message: err.Error(),
         76â”† 	})
         77â”† } else {
         78â”† 	res = append(res, JsonResp{
         79â”† 		Status:  "1",
         80â”† 		Message: "Create Users Table Success Please " + string(loginUrl),
           [hid 4 additional lines, adjust with --max-lines-per-finding] 


  templates/setup.sidebar.html 
     javascript.express.security.audit.xss.mustache.var-in-href.var-in-href
        Detected a template variable used in an anchor tag with the 'href' attribute. This allows a
        malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
        attacks. If using a relative URL, start with a literal forward slash and concatenate the
        URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy
        (CSP) header.
        Details: https://sg.run/8yOq

         12â”† <a href="{{.weburl}}index">
          â‹®â”†----------------------------------------
         18â”† <a href="{{.weburl}}setup">
          â‹®â”†----------------------------------------
     python.django.security.audit.xss.template-href-var.template-href-var
        Detected a template variable used in an anchor tag with the 'href' attribute. This allows a
        malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
        attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting
        the Content Security Policy (CSP) header.
        Details: https://sg.run/4x25

         12â”† <a href="{{.weburl}}index">
          â‹®â”†----------------------------------------
         18â”† <a href="{{.weburl}}setup">


  templates/template.header.html 
     javascript.express.security.audit.xss.mustache.var-in-script-tag.var-in-script-tag
        Detected a template variable used in a script tag. Although template variables are HTML
        escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used
        directly in JavaScript. If you need this data on the rendered page, consider placing it in
        the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific
        encoder, such as the one available in OWASP ESAPI.
        Details: https://sg.run/gLDx

         13â”† <script type="text/javascript" src="{{.weburl}}public/js/jquery-3.2.1-min.js"></script>
          â‹®â”†----------------------------------------
         14â”† <script type="text/javascript" src="{{.weburl}}public/js/bootstrap.min.js"></script>
          â‹®â”†----------------------------------------
     python.django.security.audit.xss.template-href-var.template-href-var
        Detected a template variable used in an anchor tag with the 'href' attribute. This allows a
        malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
        attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting
        the Content Security Policy (CSP) header.
        Details: https://sg.run/4x25

          7â”† <link href="{{.weburl}}public/css/font-awesome-4.7.0/css/font-awesome.css" rel="stylesheet">
          â‹®â”†----------------------------------------
         10â”† <link rel="stylesheet" type="text/css" href="{{.weburl}}public/css/open-sans.css" />
          â‹®â”†----------------------------------------
         11â”† <link href="{{.weburl}}public/css/bootstrap/css/bootstrap.min.css" rel="stylesheet">
          â‹®â”†----------------------------------------
         16â”† <link href="{{.weburl}}public/css/main.css" rel="stylesheet">
          â‹®â”†----------------------------------------
     python.django.security.audit.xss.var-in-script-tag.var-in-script-tag
        Detected a template variable used in a script tag. Although template variables are HTML
        escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used
        directly in JavaScript. If you need this data on the rendered page, consider placing it in
        the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific
        encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using
        the 'json_script' template tag and retrieving the data in your script by using the element
        ID (e.g., `document.getElementById`).
        Details: https://sg.run/Ge7q

         13â”† <script type="text/javascript" src="{{.weburl}}public/js/jquery-3.2.1-min.js"></script>
          â‹®â”†----------------------------------------
         14â”† <script type="text/javascript" src="{{.weburl}}public/js/bootstrap.min.js"></script>


  templates/template.sidebar.html 
     javascript.express.security.audit.xss.mustache.var-in-href.var-in-href
        Detected a template variable used in an anchor tag with the 'href' attribute. This allows a
        malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
        attacks. If using a relative URL, start with a literal forward slash and concatenate the
        URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy
        (CSP) header.
        Details: https://sg.run/8yOq

         12â”† <a href="{{.weburl}}index">
          â‹®â”†----------------------------------------
         18â”† <a href="{{.weburl}}setup">
          â‹®â”†----------------------------------------
         27â”† <li><a href="{{.weburl}}sqli1">SQLI 1</a></li>
          â‹®â”†----------------------------------------
         28â”† <li><a href="{{.weburl}}sqli2?uid={{.uid}}">SQLI 2</a></li>
          â‹®â”†----------------------------------------
         36â”† <li><a href="{{.weburl}}xss1">XSS 1</a></li>
          â‹®â”†----------------------------------------
         37â”† <li><a href="{{.weburl}}xss2?uid={{.uid}}">XSS 2</a></li>
          â‹®â”†----------------------------------------
         44â”† <li><a href="{{.weburl}}idor1">IDOR 1</a></li>
          â‹®â”†----------------------------------------
         45â”† <li><a href="{{.weburl}}idor2">IDOR 2</a></li>
          â‹®â”†----------------------------------------
         56â”† <a href="{{.weburl}}csa">
          â‹®â”†----------------------------------------
         63â”† <a href="{{.weburl}}setting">
          â‹®â”†----------------------------------------
         68â”† <a href="{{.weburl}}logout">
          â‹®â”†----------------------------------------
     python.django.security.audit.xss.template-href-var.template-href-var
        Detected a template variable used in an anchor tag with the 'href' attribute. This allows a
        malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
        attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting
        the Content Security Policy (CSP) header.
        Details: https://sg.run/4x25

         12â”† <a href="{{.weburl}}index">
          â‹®â”†----------------------------------------
         18â”† <a href="{{.weburl}}setup">
          â‹®â”†----------------------------------------
         27â”† <li><a href="{{.weburl}}sqli1">SQLI 1</a></li>
          â‹®â”†----------------------------------------
         28â”† <li><a href="{{.weburl}}sqli2?uid={{.uid}}">SQLI 2</a></li>
          â‹®â”†----------------------------------------
         36â”† <li><a href="{{.weburl}}xss1">XSS 1</a></li>
          â‹®â”†----------------------------------------
         37â”† <li><a href="{{.weburl}}xss2?uid={{.uid}}">XSS 2</a></li>
          â‹®â”†----------------------------------------
         44â”† <li><a href="{{.weburl}}idor1">IDOR 1</a></li>
          â‹®â”†----------------------------------------
         45â”† <li><a href="{{.weburl}}idor2">IDOR 2</a></li>
          â‹®â”†----------------------------------------
         56â”† <a href="{{.weburl}}csa">
          â‹®â”†----------------------------------------
         63â”† <a href="{{.weburl}}setting">
          â‹®â”†----------------------------------------
         68â”† <a href="{{.weburl}}logout">
          â‹®â”†----------------------------------------
     python.flask.security.xss.audit.template-href-var.template-href-var
        Detected a template variable used in an anchor tag with the 'href' attribute. This allows a
        malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
        attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
        Security Policy (CSP) header.
        Details: https://sg.run/Do7o

         28â”† <li><a href="{{.weburl}}sqli2?uid={{.uid}}">SQLI 2</a></li>
          â‹®â”†----------------------------------------
         37â”† <li><a href="{{.weburl}}xss2?uid={{.uid}}">XSS 2</a></li>


  user/session/session.go 
     go.gorilla.security.audit.session-cookie-missing-httponly.session-cookie-missing-httponly
        A session cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for
        cookies instructs the browser to forbid client-side scripts from reading the cookie which
        mitigates XSS attacks. Set the 'HttpOnly' flag by setting 'HttpOnly' to 'true' in the
        Options struct.
        Details: https://sg.run/4xJZ

         â–¶â–¶â”† Autofix â–¶ s/(HttpOnly\s*:\s+)false/\1true/g
         28â”† session.Options = &sessions.Options{
         29â”† 	Path:     "/",
         30â”† 	MaxAge:   3600,
         31â”† 	HttpOnly: false, //set to false for xss :)
         32â”† }
          â‹®â”†----------------------------------------
         â–¶â–¶â”† Autofix â–¶ s/(HttpOnly\s*:\s+)false/\1true/g
         67â”† session.Options = &sessions.Options{
         68â”† 	MaxAge:   -1,
         69â”† 	HttpOnly: false, //set to false for xss :)
         70â”† }
          â‹®â”†----------------------------------------
     go.gorilla.security.audit.session-cookie-missing-secure.session-cookie-missing-secure
        A session cookie was detected without setting the 'Secure' flag. The 'secure' flag for
        cookies prevents the client from transmitting the cookie over insecure channels such as
        HTTP.  Set the 'Secure' flag by setting 'Secure' to 'true' in the Options struct.
        Details: https://sg.run/PJdE

         â–¶â–¶â”† Autofix â–¶ s/(Secure\s*:\s+)false/\1true/g
         28â”† session.Options = &sessions.Options{
         29â”† 	Path:     "/",
         30â”† 	MaxAge:   3600,
         31â”† 	HttpOnly: false, //set to false for xss :)
         32â”† }
          â‹®â”†----------------------------------------
         â–¶â–¶â”† Autofix â–¶ s/(Secure\s*:\s+)false/\1true/g
         67â”† session.Options = &sessions.Options{
         68â”† 	MaxAge:   -1,
         69â”† 	HttpOnly: false, //set to false for xss :)
         70â”† }


  user/user.go 
     go.lang.security.audit.crypto.bad_imports.insecure-module-used
        Detected use of an insecure cryptographic hashing method. This method is known to be broken
        and easily compromised. Use SHA256 or SHA3 instead.
        Details: https://sg.run/l2gj

        160â”† hasher := md5.New()
          â‹®â”†----------------------------------------
     go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5
        Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and
        is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
        Details: https://sg.run/2xB5

        160â”† hasher := md5.New()


  util/cookie.go 
     go.gorilla.security.audit.handler-assignment-from-multiple-sources.handler-assignment-from-multiple-
     sources
        Variable level is assigned from two different sources: 'cookievalue' and '"low"'. Make sure
        this is intended, as this could cause logic bugs if they are treated as they are the same
        object.
        Details: https://sg.run/gL3y

         10â”† level := cookievalue
         11â”† if level == "" {
         12â”† 	level = "low"
         13â”† }
          â‹®â”†----------------------------------------
     go.lang.security.audit.net.cookie-missing-httponly.cookie-missing-httponly
        A session cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for
        cookies instructs the browser to forbid client-side scripts from reading the cookie which
        mitigates XSS attacks. Set the 'HttpOnly' flag by setting 'HttpOnly' to 'true' in the
        Cookie.
        Details: https://sg.run/b73e

         â–¶â–¶â”† Autofix â–¶ s/(HttpOnly\s*:\s+)false/\1true/g
         32â”† cookie := http.Cookie{
         33â”† 	//Path : "/",
         34â”† 	//Domain : "localhost",
         35â”† 	Name: name,
         36â”† 	Value: value,
         37â”† }
          â‹®â”†----------------------------------------
         â–¶â–¶â”† Autofix â–¶ s/(HttpOnly\s*:\s+)false/\1true/g
         48â”† cookie := &http.Cookie{
         49â”† 	Name:     name,
         50â”† 	Value:    "",
         51â”† 	Expires: time.Unix(0, 0),
         52â”† }
          â‹®â”†----------------------------------------
     go.lang.security.audit.net.cookie-missing-secure.cookie-missing-secure
        A session cookie was detected without setting the 'Secure' flag. The 'secure' flag for
        cookies prevents the client from transmitting the cookie over insecure channels such as
        HTTP.  Set the 'Secure' flag by setting 'Secure' to 'true' in the Options struct.
        Details: https://sg.run/N4G7

         â–¶â–¶â”† Autofix â–¶ s/(Secure\s*:\s+)false/\1true/g
         32â”† cookie := http.Cookie{
         33â”† 	//Path : "/",
         34â”† 	//Domain : "localhost",
         35â”† 	Name: name,
         36â”† 	Value: value,
         37â”† }
          â‹®â”†----------------------------------------
         â–¶â–¶â”† Autofix â–¶ s/(Secure\s*:\s+)false/\1true/g
         48â”† cookie := &http.Cookie{
         49â”† 	Name:     name,
         50â”† 	Value:    "",
         51â”† 	Expires: time.Unix(0, 0),
         52â”† }


  util/database/database.go 
     go.lang.security.audit.database.string-formatted-query.string-formatted-query
        String-formatted SQL query detected. This could lead to SQL injection if the string is not
        sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.
        Details: https://sg.run/ydEr

         24â”† _, err = db.Exec("CREATE DATABASE IF NOT EXISTS " + config.Dbname)


  util/template.go 
     go.lang.security.audit.xss.no-direct-write-to-responsewriter.no-direct-write-to-responsewriter
        Detected directly writing or similar in 'http.ResponseWriter.write()'. This bypasses HTML
        escaping that prevents cross-site scripting vulnerabilities. Instead, use the
        'html/template' package and render data using 'template.Execute()'.
        Details: https://sg.run/EkbA

         35â”† w.Write(b)
          â‹®â”†----------------------------------------
     go.lang.security.audit.xss.template-html-does-not-escape.unsafe-template-type
        Semgrep could not determine that the argument to 'template.HTML()' is a constant.
        'template.HTML()' and similar does not escape contents. Be absolutely sure there is no user-
        controlled data in this template. If user data can reach this template, you may have a XSS
        vulnerability. Instead, do not use this function and use 'template.Execute()'.
        Details: https://sg.run/3xDb

         45â”† return template.HTML(text)


  vulnerability/csa/csa.go 
     go.lang.security.audit.crypto.bad_imports.insecure-module-used
        Detected use of an insecure cryptographic hashing method. This method is known to be broken
        and easily compromised. Use SHA256 or SHA3 instead.
        Details: https://sg.run/l2gj

         62â”† hasher := md5.New()
          â‹®â”†----------------------------------------
     go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5
        Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and
        is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
        Details: https://sg.run/2xB5

         62â”† hasher := md5.New()


  vulnerability/idor/idor.go 
     go.gorilla.security.audit.handler-assignment-from-multiple-sources.handler-assignment-from-multiple-
     sources
        Variable uid is assigned from two different sources: 'HTMLEscapeString(r.FormValue("uid"))'
        and 'sid'. Make sure this is intended, as this could cause logic bugs if they are treated as
        they are the same object.
        Details: https://sg.run/gL3y

         88â”† uid := HTMLEscapeString(r.FormValue("uid"))
         89â”† name := HTMLEscapeString(r.FormValue("name"))
         90â”† city := HTMLEscapeString(r.FormValue("city"))
         91â”† number := HTMLEscapeString(r.FormValue("number"))
         92â”† 
         93â”† res := &DataResponse{}
         94â”† if uid != cid || uid == "" || cid == "" {
         95â”† 
         96â”† 	res.Status = "0"
         97â”† 	res.Message = "Missing User Id"
           [hid 17 additional lines, adjust with --max-lines-per-finding] 
        130â”† uid := HTMLEscapeString(r.FormValue("uid"))
        131â”† name := HTMLEscapeString(r.FormValue("name"))
        132â”† city := HTMLEscapeString(r.FormValue("city"))
        133â”† number := HTMLEscapeString(r.FormValue("number"))
        134â”† 
        135â”† signature := Md5Sum(uid)
        136â”† 
        137â”† res := &DataResponse{}
        138â”† if sign != signature{
        139â”† 
           [hid 19 additional lines, adjust with --max-lines-per-finding] 
     go.lang.security.audit.crypto.bad_imports.insecure-module-used
        Detected use of an insecure cryptographic hashing method. This method is known to be broken
        and easily compromised. Use SHA256 or SHA3 instead.
        Details: https://sg.run/l2gj

        164â”† hasher := md5.New()
          â‹®â”†----------------------------------------
     go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5
        Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and
        is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
        Details: https://sg.run/2xB5

        164â”† hasher := md5.New()


  vulnerability/xss/xss.go 
     go.lang.security.audit.net.formatted-template-string.formatted-template-string
        Found a formatted template string passed to 'template.HTML()'.  'template.HTML()' does not
        escape contents.  Be absolutely sure there is no user-controlled data in this template.  If
        user data can reach this template, you may have a XSS vulnerability.
        Details: https://sg.run/weE0

         52â”† notFound := fmt.Sprintf("<b><i>%s</i></b> not found",term)
         53â”† value := fmt.Sprintf("%s", term)
         54â”† 
         55â”† if term == ""{
         56â”† 	data["term"] = ""
         57â”† }else if vulnDetails == ""{
         58â”† 	data["value"] = template.HTML(value)
         59â”† 	data["term"] = template.HTML(notFound) //vulnerable function
         60â”† }else{
         61â”† 	vuln := fmt.Sprintf("<b>%s</b>",term)
           [hid 4 additional lines, adjust with --max-lines-per-finding] 
         53â”† value := fmt.Sprintf("%s", term)
         54â”† 
         55â”† if term == ""{
         56â”† 	data["term"] = ""
         57â”† }else if vulnDetails == ""{
         58â”† 	data["value"] = template.HTML(value)
         59â”† 	data["term"] = template.HTML(notFound) //vulnerable function
         60â”† }else{
         61â”† 	vuln := fmt.Sprintf("<b>%s</b>",term)
         62â”† 	data["value"] = template.HTML(value)
           [hid 3 additional lines, adjust with --max-lines-per-finding] 
         61â”† vuln := fmt.Sprintf("<b>%s</b>",term)
         62â”† data["value"] = template.HTML(value)
         63â”† data["term"] = template.HTML(vuln)
          â‹®â”†----------------------------------------
         96â”† inlineJS := fmt.Sprintf(js,uid, p.Name, p.City, p.PhoneNumber)
         97â”† 
         98â”† data["title"] = "Cross Site Scripting"
         99â”† 
        100â”† data["inlineJS"] = template.HTML(inlineJS) //this will render the javascript on client browser
          â‹®â”†----------------------------------------
     go.lang.security.audit.xss.template-html-does-not-escape.unsafe-template-type
        Semgrep could not determine that the argument to 'template.HTML()' is a constant.
        'template.HTML()' and similar does not escape contents. Be absolutely sure there is no user-
        controlled data in this template. If user data can reach this template, you may have a XSS
        vulnerability. Instead, do not use this function and use 'template.Execute()'.
        Details: https://sg.run/3xDb

         58â”† data["value"] = template.HTML(value)
          â‹®â”†----------------------------------------
         59â”† data["term"] = template.HTML(notFound) //vulnerable function
          â‹®â”†----------------------------------------
         62â”† data["value"] = template.HTML(value)
          â‹®â”†----------------------------------------
         63â”† data["term"] = template.HTML(vuln)
          â‹®â”†----------------------------------------
        100â”† data["inlineJS"] = template.HTML(inlineJS) //this will render the javascript on client browser
